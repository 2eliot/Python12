#!/usr/bin/env python3
"""
Script de prueba para diagnosticar el sistema de notificaciones por Gmail
"""

import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

def test_gmail_connection():
    """Prueba la conexi√≥n y configuraci√≥n de Gmail"""
    
    print("üîß DIAGN√ìSTICO DEL SISTEMA DE NOTIFICACIONES GMAIL")
    print("=" * 60)
    
    # Verificar variables de entorno
    print("\n1. üìã VERIFICANDO VARIABLES DE ENTORNO:")
    
    gmail_password = os.environ.get('GMAIL_APP_PASSWORD')
    admin_email = os.environ.get('ADMIN_EMAIL')
    
    print(f"   ADMIN_EMAIL: {admin_email}")
    print(f"   GMAIL_APP_PASSWORD: {'‚úÖ Configurada' if gmail_password else '‚ùå NO CONFIGURADA'}")
    
    if not gmail_password:
        print("\n‚ùå PROBLEMA IDENTIFICADO:")
        print("   La variable GMAIL_APP_PASSWORD no est√° configurada.")
        print("\nüîß SOLUCI√ìN:")
        print("   1. Ve a tu cuenta de Google: https://myaccount.google.com/")
        print("   2. Ir a 'Seguridad' ‚Üí 'Verificaci√≥n en 2 pasos' (debe estar activada)")
        print("   3. Ir a 'Contrase√±as de aplicaciones'")
        print("   4. Seleccionar 'Correo' y 'Otro (nombre personalizado)'")
        print("   5. Escribir 'Inefablestore' como nombre")
        print("   6. Copiar la contrase√±a de 16 caracteres generada")
        print("   7. Actualizar el archivo .env:")
        print("      GMAIL_APP_PASSWORD=tu_contrase√±a_de_16_caracteres")
        return False
    
    if gmail_password == 'tu_password_de_aplicacion_gmail':
        print("\n‚ùå PROBLEMA IDENTIFICADO:")
        print("   La variable GMAIL_APP_PASSWORD tiene el valor por defecto.")
        print("   Necesitas reemplazarla con una contrase√±a real de aplicaci√≥n de Gmail.")
        return False
    
    print(f"   Longitud de contrase√±a: {len(gmail_password)} caracteres")
    
    # Configuraci√≥n de email
    smtp_server = "smtp.gmail.com"
    smtp_port = 587
    email_usuario = "1yorbi1@gmail.com"
    
    print(f"\n2. üåê CONFIGURACI√ìN DE CONEXI√ìN:")
    print(f"   Servidor SMTP: {smtp_server}:{smtp_port}")
    print(f"   Email de env√≠o: {email_usuario}")
    
    # Probar conexi√≥n SMTP
    print(f"\n3. üîå PROBANDO CONEXI√ìN SMTP...")
    
    try:
        print("   Conectando al servidor SMTP...")
        server = smtplib.SMTP(smtp_server, smtp_port)
        
        print("   Iniciando TLS...")
        server.starttls()
        
        print("   Intentando autenticaci√≥n...")
        server.login(email_usuario, gmail_password)
        
        print("   ‚úÖ Conexi√≥n SMTP exitosa!")
        
        # Crear mensaje de prueba
        print(f"\n4. üìß ENVIANDO EMAIL DE PRUEBA...")
        
        mensaje = MIMEMultipart()
        mensaje['From'] = email_usuario
        mensaje['To'] = email_usuario
        mensaje['Subject'] = "üß™ Prueba de Sistema de Notificaciones - Inefable Store"
        
        cuerpo = f"""
        ¬°Prueba exitosa del sistema de notificaciones!
        
        üìã Detalles de la prueba:
        ‚Ä¢ Fecha: {os.popen('date').read().strip()}
        ‚Ä¢ Sistema: Inefable Store - SQLite
        ‚Ä¢ Estado: ‚úÖ FUNCIONANDO CORRECTAMENTE
        
        Si recibes este correo, el sistema de notificaciones est√° configurado correctamente.
        
        ---
        Sistema de Notificaciones Inefable Store
        """
        
        mensaje.attach(MIMEText(cuerpo, 'plain'))
        
        texto = mensaje.as_string()
        server.sendmail(email_usuario, email_usuario, texto)
        server.quit()
        
        print("   ‚úÖ Email de prueba enviado exitosamente!")
        print(f"   üì¨ Revisa tu bandeja de entrada en: {email_usuario}")
        
        return True
        
    except smtplib.SMTPAuthenticationError as e:
        print(f"   ‚ùå ERROR DE AUTENTICACI√ìN: {str(e)}")
        print("   üí° Verifica que tengas una contrase√±a de aplicaci√≥n v√°lida")
        print("   üí° Aseg√∫rate de tener habilitada la verificaci√≥n en 2 pasos")
        return False
        
    except smtplib.SMTPException as e:
        print(f"   ‚ùå ERROR SMTP: {str(e)}")
        return False
        
    except Exception as e:
        print(f"   ‚ùå ERROR GENERAL: {str(e)}")
        print(f"   üîç Tipo de error: {type(e).__name__}")
        return False

def test_order_notification():
    """Simula el env√≠o de notificaci√≥n de orden"""
    
    print(f"\n5. üõí SIMULANDO NOTIFICACI√ìN DE ORDEN...")
    
    # Datos de orden de prueba
    orden_data = {
        'id': 999,
        'juego_nombre': 'Free Fire (PRUEBA)',
        'paquete': '100 Diamantes',
        'monto': 0.99,
        'usuario_email': 'admin@inefablestore.com',
        'usuario_telefono': '+58-412-1234567',
        'usuario_id': '123456789',
        'metodo_pago': 'Pago M√≥vil',
        'referencia_pago': '123456789',
        'estado': 'procesando',
        'fecha': '2025-09-05 12:00:00'
    }
    
    # Importar funci√≥n de notificaci√≥n
    try:
        import sys
        sys.path.append('.')
        from main_sqlite import enviar_notificacion_orden
        
        print("   Enviando notificaci√≥n de orden de prueba...")
        resultado = enviar_notificacion_orden(orden_data)
        
        if resultado:
            print("   ‚úÖ Notificaci√≥n de orden enviada exitosamente!")
        else:
            print("   ‚ùå Error al enviar notificaci√≥n de orden")
            
        return resultado
        
    except Exception as e:
        print(f"   ‚ùå Error al importar funci√≥n: {str(e)}")
        return False

if __name__ == "__main__":
    print("üöÄ Iniciando diagn√≥stico del sistema de email...")
    
    # Probar conexi√≥n b√°sica
    conexion_ok = test_gmail_connection()
    
    if conexion_ok:
        print("\n" + "=" * 60)
        print("‚úÖ DIAGN√ìSTICO COMPLETADO - SISTEMA FUNCIONANDO")
        print("=" * 60)
        print("El sistema de notificaciones por Gmail est√° configurado correctamente.")
        print("Las notificaciones deber√≠an llegar autom√°ticamente cuando se creen nuevas √≥rdenes.")
        
        # Probar notificaci√≥n de orden
        test_order_notification()
        
    else:
        print("\n" + "=" * 60)
        print("‚ùå DIAGN√ìSTICO COMPLETADO - PROBLEMA IDENTIFICADO")
        print("=" * 60)
        print("Sigue las instrucciones anteriores para configurar Gmail correctamente.")
