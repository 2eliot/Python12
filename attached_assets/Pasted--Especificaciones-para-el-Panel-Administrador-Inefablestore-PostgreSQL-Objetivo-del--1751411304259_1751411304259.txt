---

üßæ Especificaciones para el Panel Administrador ‚Äì Inefablestore (PostgreSQL)

Objetivo del proyecto:  
Dise√±ar e implementar un panel web administrativo en Python (Flask) con PostgreSQL como base de datos. El panel debe gestionar el contenido y configuraci√≥n del sitio Inefablestore mediante pesta√±as tipo Suis, cada una con funciones espec√≠ficas.

---

üß© Estructura del Panel (Pesta√±as)

1. √ìRDENES
- Visualizaci√≥n de √≥rdenes enviadas por los usuarios.
- Datos por orden:
  - Juego seleccionado
  - Paquete
  - Monto total
  - ID del usuario
  - M√©todo de pago
  - Referencia de pago
  - Estado: procesando / procesado
  - Fecha y hora
- Bot√≥n para actualizar el estado.
- Endpoints backend:
  - GET /admin/ordenes
  - PATCH /admin/orden/:id

2. PRODUCTOS
- Crear, editar y eliminar productos.
- Cada producto puede tener m√∫ltiples paquetes con precios.
- Subir imagen por producto.
- Ejemplo:
  - Producto: Free Fire  
  - Paquete: ‚Äú110 + 10 diamantes‚Äù ‚Üí $1
- Endpoints backend:
  - POST /admin/producto
  - PUT /admin/producto/:id
  - DELETE /admin/producto/:id

3. IM√ÅGENES
- Subida de im√°genes para:
  - Logo principal
  - Carrusel
  - Productos
- Almacenamiento en /static/images/ o con ruta en la BD.
- Endpoints backend:
  - POST /admin/imagenes
  - GET /admin/imagenes

4. CONFIGURACI√ìN
- Ajustes modificables:
  - Logo del index
  - Im√°genes del carrusel
  - Tasa de conversi√≥n USD ‚Üî VES
  - Datos de pago (Pago m√≥vil, Binance‚Ä¶)
  - Bot√≥n para a√±adir nuevos m√©todos de pago
- Endpoints backend:
  - GET /admin/config
  - PUT /admin/config

---

üóÉ Esquema de Base de Datos PostgreSQL

`sql
-- Tabla de Juegos
CREATE TABLE juegos (
  id SERIAL PRIMARY KEY,
  nombre VARCHAR(100),
  descripcion TEXT,
  imagen VARCHAR(255)
);

-- Tabla de Paquetes
CREATE TABLE paquetes (
  id SERIAL PRIMARY KEY,
  juego_id INTEGER REFERENCES juegos(id),
  nombre VARCHAR(100),
  precio NUMERIC(10,2)
);

-- Tabla de √ìrdenes
CREATE TABLE ordenes (
  id SERIAL PRIMARY KEY,
  juego_id INTEGER REFERENCES juegos(id),
  paquete VARCHAR(100),
  monto NUMERIC(10,2),
  usuario_email VARCHAR(100),
  metodo_pago VARCHAR(50),
  referencia_pago VARCHAR(100),
  estado VARCHAR(20) DEFAULT 'procesando',
  fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla de Im√°genes
CREATE TABLE imagenes (
  id SERIAL PRIMARY KEY,
  tipo VARCHAR(50), -- logo, carrusel, producto
  ruta VARCHAR(255)
);

-- Tabla de Configuraci√≥n
CREATE TABLE configuracion (
  id SERIAL PRIMARY KEY,
  campo VARCHAR(50),
  valor TEXT
);
`

---

üõ† Requisitos T√©cnicos

- Lenguaje: Python  
- Framework: Flask  
- Base de datos: PostgreSQL  
- Plantillas HTML con pesta√±as tipo Suis  
- CRUD desde formularios y paneles  
- Backend RESTful con rutas organizadas  
- Panel responsivo y adaptable a dispositivos m√≥viles  
- Validaci√≥n b√°sica de formularios y control de estados
