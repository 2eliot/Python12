#!/usr/bin/env python3
"""
Script para probar el env√≠o de notificaciones usando √≥rdenes existentes
"""

import sqlite3
import sys
import os
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

def test_notification_with_real_order():
    """Prueba el env√≠o de notificaci√≥n usando una orden real de la base de datos"""
    
    print("üß™ PROBANDO NOTIFICACIONES CON ORDEN REAL")
    print("=" * 60)
    
    try:
        # Conectar a la base de datos
        conn = sqlite3.connect('inefablestore.db')
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        # Obtener la orden m√°s reciente
        cursor.execute("""
            SELECT o.*, j.nombre as juego_nombre 
            FROM ordenes o 
            LEFT JOIN juegos j ON o.juego_id = j.id 
            ORDER BY o.fecha DESC 
            LIMIT 1
        """)
        
        orden = cursor.fetchone()
        
        if not orden:
            print("‚ùå No hay √≥rdenes en la base de datos")
            return False
            
        print(f"üì¶ USANDO ORDEN #{orden['id']}:")
        print(f"   Email: {orden['usuario_email']}")
        print(f"   Juego: {orden['juego_nombre']}")
        print(f"   Paquete: {orden['paquete']}")
        print(f"   Monto: ${orden['monto']}")
        print(f"   Estado: {orden['estado']}")
        
        # Convertir a diccionario para la funci√≥n de notificaci√≥n
        orden_data = {
            'id': orden['id'],
            'juego_id': orden['juego_id'],
            'paquete': orden['paquete'],
            'monto': orden['monto'],
            'usuario_email': orden['usuario_email'],
            'usuario_id': orden['usuario_id'],
            'usuario_telefono': orden['usuario_telefono'],
            'metodo_pago': orden['metodo_pago'],
            'referencia_pago': orden['referencia_pago'],
            'estado': orden['estado'],
            'fecha': orden['fecha'],
            'juego_nombre': orden['juego_nombre']
        }
        
        conn.close()
        
        # Importar y probar funci√≥n de notificaci√≥n
        print(f"\nüìß PROBANDO ENV√çO DE NOTIFICACI√ìN...")
        
        sys.path.append('.')
        from main_sqlite import enviar_notificacion_orden
        
        print("   Enviando notificaci√≥n de orden...")
        resultado = enviar_notificacion_orden(orden_data)
        
        if resultado:
            print("   ‚úÖ Notificaci√≥n enviada exitosamente!")
            print(f"   üì¨ Revisa tu bandeja de entrada en: 1yorbi1@gmail.com")
            return True
        else:
            print("   ‚ùå Error al enviar notificaci√≥n")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en la prueba: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def test_order_completion_notification():
    """Prueba notificaci√≥n de orden completada"""
    
    print(f"\nüéâ PROBANDO NOTIFICACI√ìN DE ORDEN COMPLETADA...")
    
    try:
        # Obtener una orden procesada
        conn = sqlite3.connect('inefablestore.db')
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT o.*, j.nombre as juego_nombre, j.categoria
            FROM ordenes o 
            LEFT JOIN juegos j ON o.juego_id = j.id 
            WHERE o.estado = 'procesado'
            ORDER BY o.fecha DESC 
            LIMIT 1
        """)
        
        orden = cursor.fetchone()
        
        if not orden:
            print("   ‚ö†Ô∏è No hay √≥rdenes procesadas para probar")
            return False
            
        print(f"   Usando orden #{orden['id']} (estado: {orden['estado']})")
        
        # Convertir a diccionario
        orden_dict = dict(orden)
        
        conn.close()
        
        # Importar funci√≥n de confirmaci√≥n
        from main_sqlite import enviar_correo_recarga_completada
        
        print("   Enviando confirmaci√≥n de recarga completada...")
        resultado = enviar_correo_recarga_completada(orden_dict)
        
        if resultado:
            print("   ‚úÖ Confirmaci√≥n enviada exitosamente!")
            return True
        else:
            print("   ‚ùå Error al enviar confirmaci√≥n")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Error: {str(e)}")
        return False

def check_gmail_config():
    """Verifica la configuraci√≥n de Gmail"""
    
    print(f"\nüîß VERIFICANDO CONFIGURACI√ìN DE GMAIL...")
    
    gmail_password = os.environ.get('GMAIL_APP_PASSWORD')
    
    if not gmail_password:
        print("   ‚ùå GMAIL_APP_PASSWORD no configurada")
        return False
        
    if gmail_password == 'tu_password_de_aplicacion_gmail':
        print("   ‚ùå GMAIL_APP_PASSWORD tiene valor por defecto")
        return False
        
    print(f"   ‚úÖ GMAIL_APP_PASSWORD configurada ({len(gmail_password)} caracteres)")
    
    # Probar conexi√≥n SMTP
    import smtplib
    
    try:
        print("   Probando conexi√≥n SMTP...")
        server = smtplib.SMTP("smtp.gmail.com", 587)
        server.starttls()
        server.login("1yorbi1@gmail.com", gmail_password)
        server.quit()
        print("   ‚úÖ Conexi√≥n SMTP exitosa")
        return True
    except Exception as e:
        print(f"   ‚ùå Error SMTP: {str(e)}")
        return False

if __name__ == "__main__":
    print("üöÄ Iniciando prueba de notificaciones...")
    
    # 1. Verificar configuraci√≥n de Gmail
    gmail_ok = check_gmail_config()
    
    if not gmail_ok:
        print("\n‚ùå Configuraci√≥n de Gmail incorrecta")
        exit(1)
    
    # 2. Probar notificaci√≥n de nueva orden
    print("\n" + "=" * 60)
    notif_ok = test_notification_with_real_order()
    
    # 3. Probar notificaci√≥n de orden completada
    print("\n" + "=" * 60)
    completion_ok = test_order_completion_notification()
    
    # Resumen
    print("\n" + "=" * 60)
    print("üìã RESUMEN DE PRUEBAS:")
    print(f"   Gmail configurado: {'‚úÖ' if gmail_ok else '‚ùå'}")
    print(f"   Notificaci√≥n nueva orden: {'‚úÖ' if notif_ok else '‚ùå'}")
    print(f"   Notificaci√≥n orden completada: {'‚úÖ' if completion_ok else '‚ùå'}")
    
    if gmail_ok and (notif_ok or completion_ok):
        print("\nüéâ ¬°SISTEMA DE NOTIFICACIONES FUNCIONANDO!")
        print("   Las notificaciones deber√≠an llegar autom√°ticamente")
    else:
        print("\n‚ö†Ô∏è Hay problemas con el sistema de notificaciones")
